Grouping algorithm

1. Separate students who cannot work together.
2. Put together students who must work together.
3. Calculate a score for every student:
1. Get GPA
2. Get sum of skill ratings
4. Sort students by score.
5. Complete partial groups from steps 1 and 2.
6. Make balanced groups using the sorted list.

How to handle the case of class size not divisible by group size? 
Number of groups = CEILING (CLASS SIZE divided GROUP SIZE)
*Need to design in such a way that this method can be easily replaced (code to an interface with concrete classes that implement this method differently)

1. Make a list of empty GROUPS.
2. For every person in a forbidden combination, put in a different group and remove them from class list. 
3. For every person in a mandatory combination, put in the same group and remove them from class list.
4. For  every student left in the class list:
1. Get the sum of the skill ratings and divide by perfect sum. Multiply by 50. 
2. Get the GPA and divide by maximum GPA. Multiply by 50.
3. Add to get score. 
--> This is one particular implementation for balancing groups. This would be in the method of one concrete class that implements the interface which defines the “distribute to groups” method. 
5. Sort the students by score. 
6. Segment into n percentiles (n is the group size)
7. For every partial group, complete with students from this sorted class list and remove them from the class list.
8. Make remaining groups by taking one student from each segment. 
9. If there are left over students, put them in a group together (no matter how many). 

Need to keep track of whether or not a group is full (Boolean?). Need to keep track of how many students are left in class list (int). Need to balance partial groups.



